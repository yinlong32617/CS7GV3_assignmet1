#version 330
#define PI 3.14159

varying vec3 normal,pos;
uniform int goal;
uniform int RML; //1=Right, 2=Middle, 3=Left

vec4 LightPosition = vec4 (100.0, 0.0, 200.0, 0.0);

float t(float s, vec3 lightDir, vec3 norm, vec3 eye) {
    if (s > 0) {
       return max(dot(norm, lightDir), dot(norm, eye));
    }
    else{
        return 1.0;
    }
}

void OrenNayar(float r)
{
	float shininess = 25.0;
	float albedo = 3.0;
	//float roughness = 0.1;
	float roughness = r;
	vec3 ambientCol = vec3(0.2, 0.0, 0.0);
	vec3 diffuseCol = vec3(0.5, 0.5, 1.0); 
	vec3 specularCol = vec3(1.0, 1.0, 1.0);

	vec3 eye = normalize(pos);
	vec3 norm = normalize(normal);
	vec3 light = vec3(0.25, 0.25, -1);
	vec3 lightDir = normalize(-light);
	float specularity = 0.0;

	float a = (1/PI) * (1.0 - (0.5 * ((roughness * roughness) / ((roughness * roughness) + 0.33))) +
                (0.17 * albedo * ((roughness * roughness) / ((roughness * roughness) + 0.13))));
    float b = (1/PI) * (0.45 * ((roughness * roughness) / ((roughness * roughness) + 0.09)));
    float s = dot(lightDir, eye) - (dot(norm, lightDir) * dot(norm, eye));
    float lambert = albedo * dot(norm, lightDir) * (a + (b * (s / t(s, lightDir, norm, eye))));

	if (lambert > 0) {
        vec3 h = normalize(lightDir+eye);
        float specularAngle = max(dot(h, norm), 0.0);
        specularity = pow(specularAngle, shininess);
    }
	vec3 fragColor = ambientCol + lambert * diffuseCol + specularity * specularCol;
	gl_FragColor = vec4(fragColor,1);
}


void Gooch(float p)
{
	vec3  SurfaceColor = vec3(0.5, 0.5, 1.0);
	vec3  WarmColor = vec3(0.6, 0.6, 0.0);
	vec3  CoolColor = vec3(0.0, 0.0, 0.6);
	float DiffuseWarm = 0.45;
	float DiffuseCool = 0.45;

	vec3 lightVec = normalize(vec3(LightPosition) - pos);
	//float NdotL = (dot(lightVec, normalize(normal)) + 1.0) * 0.5;
	float NdotL = (dot(lightVec, normalize(normal)) + 1.0) * p;

	vec3 kcool    = min(CoolColor + DiffuseCool * SurfaceColor, 1.0);
    vec3 kwarm    = min(WarmColor + DiffuseWarm * SurfaceColor, 1.0); 
	vec3 kfinal   = mix(kcool, kwarm, NdotL);

	vec3 nreflect = normalize(reflect(-lightVec,normalize(normal)));
	vec3 nview = normalize(-pos);
	float spec = max(dot(nreflect, nview), 0.0);
    spec       = pow(spec, 32.0);

    gl_FragColor = vec4(min(kfinal + spec, 1.0), 1.0);
}

void Phone(int p)
{
	// p = Phong exponent

	vec3 lightDir = normalize(vec3(LightPosition));

	float i_diffuse, i_specular, i_ambient;
	vec3 n;
	vec3 viewDir = normalize(-pos);
	vec3 refDir = normalize(-reflect(lightDir, normal));
	vec4 color;
	n = normalize(normal);
	i_diffuse = max(dot(lightDir,n), 0.0);
	i_specular = max( pow( dot(refDir, viewDir), p), 0.0);
	i_ambient = 1;
	color = vec4(0.5, 0.5, 1.0, 1) * i_diffuse + vec4(1, 1, 1, 1)* i_specular + i_ambient*vec4(.2, 0, 0, 1);
	gl_FragColor = color;
}

void main()
{
	if(goal == 4)
	{
		if(RML == 1) //1=Right, 2=Middle, 3=Left
		{
			Phone(2);
		}
		else if(RML == 2)
		{
			Phone(6);
		}
		else if(RML == 3)
		{
			Phone(100);
		}
	}
	else if(goal == 5)
	{
		if(RML == 1) //1=Right, 2=Middle, 3=Left
		{
			Gooch(0.15);
		}
		else if(RML == 2)
		{
			Gooch(0.5);
		}
		else if(RML == 3)
		{
			Gooch(0.75);
		}
	}
	else if(goal == 6)
	{
		if(RML == 1) //1=Right, 2=Middle, 3=Left
		{
			OrenNayar(0.0);
		}
		else if(RML == 2)
		{
			OrenNayar(0.1);
		}
		else if(RML == 3)
		{
			OrenNayar(0.3);
		}
	}
}
